# -*- coding: utf-8 -*-
"""sriknth1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1czw-qUcSC2idirrAzXICgstyphWqkFfF

Upload the Dataset
"""

from google.colab import files
uploaded = files.upload()

"""Load the Dataset"""

import pandas as pd

# Replace the file name if different
df = pd.read_csv('/content/PRSA_data_2010.1.1-2014.12.31.csv')
df.head()

"""Data Exploration"""

# Shape and info
print("Shape:", df.shape)
print("\nInfo:\n")
df.info()

# Describe
df.describe()

"""Check for Missing Values and Duplicates"""

# Missing values
print("Missing values:\n", df.isnull().sum())

# Duplicates
print("\nDuplicate rows:", df.duplicated().sum())

# Drop duplicates if necessary
df = df.drop_duplicates()

""" Visualize a Few Features"""

import matplotlib.pyplot as plt
import seaborn as sns

# Distribution of a few numeric features
features = ['TEMP', 'PRES', 'DEWP', 'pm2.5']
for feature in features:
    sns.histplot(df[feature].dropna(), kde=True)
    plt.title(f'Distribution of {feature}')
    plt.show()

"""Identify Target and Features"""

# Assuming 'pm2.5' is the target variable
target = 'pm2.5'
features = df.drop(columns=[target]).columns.tolist()
print("Features:", features)

"""Convert Categorical Columns to Numerical"""

# Example: converting 'cbwd' (wind direction) to numerical codes
if 'cbwd' in df.columns:
    df['cbwd'] = df['cbwd'].astype('category').cat.codes

"""One-Hot Encoding"""

df = pd.get_dummies(df, columns=df.select_dtypes(include='object').columns)

""" Feature Scaling"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaled_features = scaler.fit_transform(df.drop(columns=[target]))
X = pd.DataFrame(scaled_features, columns=df.drop(columns=[target]).columns)
y = df[target]

""" Train-Test Split"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Model Building"""

import numpy as np

# Find indices where y_train is not NaN
mask = ~np.isnan(y_train)

# Filter both X_train and y_train
X_train_clean = X_train[mask]
y_train_clean = y_train[mask]

# Fit the model
model.fit(X_train_clean, y_train_clean)

""" Evaluation"""

# Step 1: Clean y_train (removing NaNs)
import numpy as np

mask = ~np.isnan(y_train)
X_train_clean = X_train[mask]
y_train_clean = y_train[mask]

# Step 2: Fit the model
from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(random_state=42)
model.fit(X_train_clean, y_train_clean)

# Step 3: Predict and evaluate
y_pred = model.predict(X_test)
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
print("Any NaNs in y_test?", np.isnan(y_test).any())
print("Any NaNs in y_pred?", np.isnan(y_pred).any())

"""Make Predictions from New Input"""

from sklearn.metrics import mean_squared_error, r2_score
y_pred = model.predict(X_test)
print("Type of y_test:", type(y_test))
print("Type of y_pred:", type(y_pred))
print("y_test[:5]:", y_test[:5])
print("y_pred[:5]:", y_pred[:5])

import numpy as np
print("Any NaNs in y_test?", np.isnan(y_test).any())
print("Any NaNs in y_pred?", np.isnan(y_pred).any())

"""Convert to DataFrame and Encode"""

# Simulate user input
user_input = {'TEMP': 5, 'PRES': 1020, 'DEWP': -3, 'cbwd': 'NW', 'Iws': 10, 'Is': 0, 'Ir': 0}
user_df = pd.DataFrame([user_input])

# Convert categorical columns
if 'cbwd' in user_df.columns:
    user_df['cbwd'] = user_df['cbwd'].astype('category').cat.codes

print("Scaler was fitted on:", scaler.feature_names_in_)
print("User input columns: ", user_df.columns.tolist())

"""Predict the Final Grade (PM2.5)"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

# Simulated training data (replace with your actual data)
data = {
    'TEMP': [22, 25, 20, 18, 23, 19],
    'PRES': [1015, 1020, 1012, 1018, 1016, 1022],
    'DEWP': [10, 12, 8, 7, 9, 11],
    'cbwd': ['NW', 'NE', 'SE', 'SW', 'NW', 'SE'],
    'Iws': [15, 18, 13, 12, 14, 16],
    'Is': [5, 3, 4, 6, 5, 4],
    'Ir': [0, 1, 0, 0, 1, 0],
    'PM2.5': [25, 30, 20, 15, 28, 22]  # Target variable (Final Grade - PM2.5)
}

df = pd.DataFrame(data)

# Preprocessing
# Handle categorical variable 'cbwd' (convert to numerical codes)
df['cbwd'] = df['cbwd'].astype('category').cat.codes

# Feature columns and target variable
X = df.drop('PM2.5', axis=1)
y = df['PM2.5']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model training (Random Forest Regressor)
model = RandomForestRegressor(random_state=42)
model.fit(X_train_scaled, y_train)

# Prediction for new data (simulated user input)
user_input = {'TEMP': 5, 'PRES': 1020, 'DEWP': -3, 'cbwd': 'NW', 'Iws': 10, 'Is': 0, 'Ir': 0}
user_df = pd.DataFrame([user_input])

# Convert categorical feature (same as training time)
user_df['cbwd'] = user_df['cbwd'].astype('category').cat.codes

# Scale the user input
user_df_scaled = scaler.transform(user_df)

# Make prediction
final_prediction = model.predict(user_df_scaled)
print("Final Predicted PM2.5:", final_prediction[0])

"""Deployment - Building an Interactive App"""

!pip install gradio
import gradio as gr

""" Create a Prediction Function"""

def predict_pm25(TEMP, PRES, DEWP, Iws, Is, Ir, cbwd_code):
    input_data = pd.DataFrame([{
        'TEMP': TEMP, 'PRES': PRES, 'DEWP': DEWP,
        'Iws': Iws, 'Is': Is, 'Ir': Ir,
        'cbwd': cbwd_code
    }])
    input_data_scaled = scaler.transform(input_data)
    pred = model.predict(input_data_scaled)
    return f"Predicted PM2.5: {pred[0]:.2f}"

"""Create the Gradio Interface"""

iface = gr.Interface(
    fn=predict_pm25,
    inputs=[
        gr.Number(label="TEMP"),
        gr.Number(label="PRES"),
        gr.Number(label="DEWP"),
        gr.Number(label="Iws"),
        gr.Number(label="Is"),
        gr.Number(label="Ir"),
        gr.Number(label="CBWD (as code)")
    ],
    outputs="text"
)

iface.launch()